consumes:
- application/json
definitions:
  app.ApiJson:
    properties:
      code:
        type: integer
      data: {}
      msg:
        type: string
    type: object
  v1.CommonParam:
    properties:
      param1:
        description: param1, min 10 words and max 255 words
        maxLength: 255
        minLength: 10
        type: string
      param2:
        description: param2, required
        type: string
      param3:
        description: param3, if it's null, validate nothing. if it's not null, must
          match email regex
        type: string
    required:
    - param2
    type: object
  v1.LoginParam:
    properties:
      loginName:
        type: string
      password:
        type: string
    required:
    - loginName
    - password
    type: object
  v1.RegisterParam:
    properties:
      displayName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
    required:
    - displayName
    - email
    - password
    type: object
info:
  contact:
    email: axiangcoding@gmail.com
    name: axiangcoding
  description: This project is a web application scaffold developed using the Go language.
    It integrates some of the most commonly used frameworks in the Go language ecology
    and provides a relatively light development experience, which is especially suitable
    for small projects as an initial template.
  license: {}
  title: axiangcoding/gin-template
  version: 1.0.0
paths:
  /v1/demo/get:
    get:
      parameters:
      - description: param1, min 10 words and max 255 words
        in: query
        maxLength: 255
        minLength: 10
        name: param1
        type: string
      - description: param2, required
        in: query
        name: param2
        required: true
        type: string
      - description: param3, if it's null, validate nothing. if it's not null, must
          match email regex
        in: query
        name: param3
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.ApiJson'
      summary: Demo for Get
      tags:
      - Demo API
  /v1/demo/post:
    post:
      parameters:
      - description: getParam
        in: body
        name: param
        required: true
        schema:
          $ref: '#/definitions/v1.CommonParam'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.ApiJson'
      summary: Demo for Post
      tags:
      - Demo API
  /v1/system/info:
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.ApiJson'
      summary: System Info
      tags:
      - System API
  /v1/user/login:
    post:
      parameters:
      - description: login param
        in: body
        name: param
        required: true
        schema:
          $ref: '#/definitions/v1.LoginParam'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.ApiJson'
      tags:
      - User API
  /v1/user/me:
    post:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.ApiJson'
      tags:
      - User API
  /v1/user/register:
    post:
      parameters:
      - description: register param
        in: body
        name: param
        required: true
        schema:
          $ref: '#/definitions/v1.RegisterParam'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.ApiJson'
      tags:
      - User API
produces:
- application/json
swagger: "2.0"
